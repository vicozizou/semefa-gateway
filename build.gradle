buildscript {
  dependencies {
    classpath 'org.jvnet.jaxb2_commons:jaxb2-basics-annotate:1.1.0'
  }
}

plugins {
  id 'idea'
  id 'org.jetbrains.kotlin.jvm' version '1.5.10'
  id 'org.jetbrains.kotlin.plugin.spring' version '1.5.10'
  id 'org.springframework.boot' version '2.5.0'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
//  id 'no.nils.wsdl2java' version '0.12'
}

group = 'com.saludaunclic.semefa'
version = '1.0'
sourceCompatibility = JavaVersion.VERSION_11

repositories {
  mavenCentral()
}

dependencies {
  annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
  // https://mvnrepository.com/artifact/javax.el/javax.el-api
  implementation'javax.el:javax.el-api:3.0.1-b06'
  implementation 'org.hibernate.validator:hibernate-validator:7.0.1.Final'
  compileOnly 'org.springframework.boot:spring-boot-configuration-processor'
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
//  implementation 'org.springframework.boot:spring-boot-starter-amqp'
//  implementation 'org.springframework.boot:spring-boot-starter-artemis'
  implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
  implementation 'org.springframework.boot:spring-boot-starter-hateoas'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-web-services'
  implementation 'org.springframework.session:spring-session-core'
  implementation 'io.jsonwebtoken:jjwt:0.9.1'
//  implementation 'org.liquibase:liquibase-core'
  implementation files('libs/com.ibm.mq.commonservices.jar')
  implementation files('libs/com.ibm.mq.jmqi.jar')
  implementation files('libs/com.ibm.mq.headers.jar')
  implementation files('libs/com.ibm.mq.pcf.jar')
  implementation files('libs/com.ibm.mq.jar')
  implementation files('libs/connector.jar')
  implementation files('libs/jr-afiliacion-susalud-1.0.0.jar')
  runtimeOnly 'mysql:mysql-connector-java'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
//  testImplementation 'org.springframework.amqp:spring-rabbit-test'
  testImplementation 'org.springframework.security:spring-security-test'
}

/*wsdl2java {
  wsdlsToGenerate = [

    ["-p", "com.asurint.wsdl.compass.mvrsearch",
     "-wsdlLocation", "classpath:wsdl/DatalinkOrderService-MVRSearch.wsdl",
     "$projectDir/src/main/resources/wsdl/DatalinkOrderService-MVRSearch.wsdl"],

    ["-p", "com.asurint.wsdl.psp.driverdata",
     "-autoNameResolution",
     "-wsdlLocation", "classpath:wsdl/psp/ServiceWeb.wsdl",
     "$projectDir/src/main/resources/wsdl/psp/ServiceWeb.wsdl"],

    ["-p", "com.asurint.wsdl.samba.mvrsearch",
     "-wsdlLocation", "classpath:wsdl/adrconnectwebservice.wsdl",
     "-b", "$projectDir/src/main/resources/wsdl/bindings.xjb",
     "-xjc-Xannotate",
     "$projectDir/src/main/resources/wsdl/adrconnectwebservice.wsdl"]

  ]
}

xjcGenerate {
  extraArgs = ['-Xannotate']*/

  //source = fileTree("$projectDir/src/main/resources/xsd/compass/") { include '**/*.xsd' }
  /*targetPackage = "com.asurint.compass.xsdpojos"
  outputDirectory = file("$buildDir/generatedsources/src/main/java")

}

project.ext {
  jaxbTargetDir = file("$buildDir/generatedsources/src/main/java")
}

configurations {
  xsd2java
}

dependencies {
  xsd2java "com.sun.xml.bind:jaxb-xjc:2.2.6"
  xsd2java "com.sun.xml.bind:jaxb-impl:2.2.6"
}

task xsd2java() {

  doLast {
    ant.taskdef(name: 'xjc', classname: 'com.sun.tools.xjc.XJCTask', classpath: configurations.xsd2java.asPath)
    ant.jaxbTargetDir = jaxbTargetDir

    ant.xjc(
            destdir: '${jaxbTargetDir}',
            package: 'com.asurint.samba.xsdpojos.order',
            schema: "$projectDir/src/main/resources/xsd/samba/OrderExample.xsd"
    )

    ant.xjc(
            destdir: '${jaxbTargetDir}',
            package: 'com.asurint.samba.xsdpojos.communication',
            schema: "$projectDir/src/main/resources/xsd/samba/CommunicationsExample.xsd"
    )

    ant.xjc(
            destdir: '${jaxbTargetDir}',
            package: 'com.asurint.samba.xsdpojos.response',
            schema: "$projectDir/src/main/resources/xsd/samba/adrresponse.xsd"
    )
  }
}

compileKotlin {
  dependsOn wsdl2java
  dependsOn xjcGenerate
  dependsOn xsd2java

}

compileTestKotlin {
  dependsOn wsdl2java
  dependsOn xjcGenerate
  dependsOn xsd2java

}

sourceSets {
  main {
    java.srcDir "$buildDir/generatedsources/src/main/java/"
  }
}*/

test {
  useJUnitPlatform()
}

task dockerInitDeps(type: Exec) {
  commandLine './scripts/docker-init-deps.sh'
}

task dockerStopDeps(type: Exec) {
  commandLine './scripts/docker-stop-deps.sh'
}

task dockerRestartDeps(type: Exec) {
  commandLine './scripts/docker-stop-deps.sh'
  finalizedBy dockerInitDeps
}
